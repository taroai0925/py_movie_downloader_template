name: Manual Transcript Workflow

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # ジョブを'run-transcription'一つに統合
  run-transcription:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # --- ここからが統合された処理 ---

      - name: Run main process (Download, Transcribe, etc.)
        id: main_process
        env:
          # secretsから認証情報を環境変数として渡す
          # GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          # GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          # GOOGLE_API_KEY_1: ${{ secrets.GOOGLE_API_KEY_1 }}
          # GOOGLE_API_KEY_2: ${{ secrets.GOOGLE_API_KEY_2 }}
          # GOOGLE_API_KEY_3: ${{ secrets.GOOGLE_API_KEY_3 }}
          # GOOGLE_API_KEY_4: ${{ secrets.GOOGLE_API_KEY_4 }}
          # GOOGLE_API_KEY_5: ${{ secrets.GOOGLE_API_KEY_5 }}
          # GOOGLE_API_KEY_6: ${{ secrets.GOOGLE_API_KEY_6 }}
          # GOOGLE_API_KEY_7: ${{ secrets.GOOGLE_API_KEY_7 }}
          # GOOGLE_API_KEY_8: ${{ secrets.GOOGLE_API_KEY_8 }}
          # GOOGLE_API_KEY_9: ${{ secrets.GOOGLE_API_KEY_9 }}
          # GOOGLE_API_KEY_10: ${{ secrets.GOOGLE_API_KEY_10 }}
          CREDENTIALS_JSON: ${{ secrets.CREDENTIALS_JSON }}
          TOKEN_JSON: ${{ secrets.TOKEN_JSON }}
          # .envファイルの中身を、複数行文字列として安全に環境変数にセットする
          ENV_FILE_CONTENT: ${{ secrets.ENV_FILE }}
        run: |
          # 1. GitHub Secretからcredentials.jsonファイルを復元する
          echo "$CREDENTIALS_JSON" > credentials.json
          # 2. GitHub Secretからtoken.jsonファイルを復元する
          echo "$TOKEN_JSON" > token.json
          
          # 3. GitHub Secretから.envファイルを復元する
          echo "$ENV_FILE_CONTENT" > .env

          echo "secretsから認証ファイルを生成しました。"


          echo "--- DEBUG: credentials.jsonの中身を確認します ---"
          # catコマンドでファイルの内容をログに出力する
          cat credentials.json
          echo "--- DEBUG: credentials.jsonの確認完了 ---"
          
          echo "--- DEBUG: token.jsonの中身を確認します ---"
          # catコマンドでファイルの内容をログに出力する
          cat token.json
          echo "--- DEBUG: token.jsonの確認完了 ---"

          echo "--- DEBUG: .envの中身を確認します ---"
          # catコマンドでファイルの内容をログに出力する
          cat .env
          echo "--- DEBUG: .envの確認完了 ---"


          # メインのPythonスクリプトを実行する
          # このスクリプトが内部でDriveから新しい動画を1つ見つけ、
          # ダウンロード、変換、文字起こしまで全てを行う
          python m00_main_mojiokosi.py
      
      # --- 処理ここまで ---

      - name: Upload logs and results as artifact
        # always()を指定することで、前のステップが失敗しても必ず実行される
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-and-logs
          path: |
            downloads/
            m4a/
            split_m4a/
            temp_logs/
            processed_success.log
            processed_failure.log
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Log Files
        run: |
          # 存在するログファイルだけをgit addの対象にする
          FILES_TO_COMMIT=""
          if [ -f processed_success.log ]; then
            FILES_TO_COMMIT="$FILES_TO_COMMIT processed_success.log"
          fi
          if [ -f processed_failure.log ]; then
            FILES_TO_COMMIT="$FILES_TO_COMMIT processed_failure.log"
          fi

          # 追加すべきファイルがある場合のみgit addを実行
          if [ -n "$FILES_TO_COMMIT" ]; then
            git add $FILES_TO_COMMIT
          fi
          
          
          # git diffで変更があった場合のみコミット＆プッシュを実行
          if ! git diff --staged --quiet; then
            JST_TIMESTAMP=$(TZ=Asia/Tokyo date +'%Y%m%d-%H%M%S')
            COMMIT_MESSAGE="$JST_TIMESTAMP: Update transcription logs via GitHub Actions"
            git commit -m "$COMMIT_MESSAGE"
            git push
          else
            echo "No new log entries to commit."
          fi